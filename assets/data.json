[
    {
        "title": "0: Introduction",
        "description": [
            "This is a simple app to visualise and communicate the content of a knowledge base in the RDF format. The project is open source, and we welcome all who is interested in participated. Please find the Github repository [here](https://github.com/MadsHolten/sparql-visualizer).\n",
            "The frontend of the is based on [Angular](https://angular.io/), [material design](https://material.angular.io/) and [D3](https://d3js.org/) and the default local triplestore is based on [rdfstore](https://github.com/antoniogarrote/rdfstore-js). Since rdfstore does not fully support SPARQL and has no reasoning capabilities, it is recomended to use a [Stardog](https://www.stardog.com/) based triplestore instead.",
            "### Use a Stardog triplestore",
            "To use the app with a Stardog tripestore this must either be available online, or this app must be run in a local environment. To do the latter, simply clone the repository, install the dependencies with `npm install` (requires [node.js](https://nodejs.org/en/)) and run a development server with `ng serve` (requires [Angular CLI](https://cli.angular.io/)).",
            "With a local copy of the app running, make sure you have a Stardog running (defaults to port 5820) with an empty database (let's call it 'test'), so that you don't delete anything important. Then click the \"Switch to triplestore\" button and type in \"http://localhost:5820\" as endpoint and \"test\" as database. If you haven't changed the username and password they both default to \"admin\".",
            "### Use local datasets",
            "This will work, but beware that some queries will not run properly, and INSERT/DELETE will not be possible.",
            "### Resources",
            "*[Documentation](https://www.w3.org/TR/sparql11-query/)\n",
            "*[Online course in Linked Data Engineering](https://open.hpi.de/courses/semanticweb2016)"
        ],
        "query": "",
        "triples": ""
    },
    {
        "title": "1: Simple",
        "description": [
            "This is a simple way of describing requirements of a set of abstract spaces. Each space is assigned a space type as a string value, for querying for a specific type, or for updating/deleting/adding properties on a type level.",
            "The simple approach has the disadvantage of not being able to manage provenance or history of the properties, and it is nowhere stated that the `prop:area` is a requirement rather than an actual value.",
            "#### Triples",
            "The dataset includes three spaces. Two of them have the datatypeproperty prop:type specified as `\"Type A\"` and the last one is specified as `\"Type B\"`. They all have datatype property `prop:area` assigned.",
            "Assigning a property to all spaces of a certain type can be achieved with the following query:\n",

            "```sparql",
            "INSERT { ?s prop:area \"12 m2\" }",
            "WHERE { ?s a bot:Space ; prop:type \"Type A\" }```",
            "Updating a property can be achieved with:\n",

            "```sparql",
            "DELETE { ?s prop:area ?val }",
            "INSERT { ?s prop:area \"14 m2\" }",
            "WHERE { ?s a bot:Space ; prop:type \"Type A\" ; prop:area ?val }```",
            "#### Query",
            "The specified query retrieves all spaces of `prop:type` `\"Type A\"` and their properties."
        ],
        "triples": [
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .",
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix inst: <https://example.org/projectXX/> .",
            "@prefix prop: <https://w3id.org/prop#> .\n",

            "# THREE SPACE INSTANCES - TWO TYPES",
            "inst:SpaceA a bot:Space ;",
            "\tprop:type \"Type A\" ;",
            "\tprop:area \"12 m2\" .",
            "inst:SpaceB a bot:Space ;",
            "\tprop:type \"Type A\" ;",
            "\tprop:area \"12 m2\" .",
            "inst:SpaceC a bot:Space ;",
            "\tprop:type \"Type B\" ;",
            "\tprop:area \"16 m2\" ."
        ],
        "query": [
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>",
            "PREFIX inst: <https://example.org/projectXX/>",
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX prop: <https://w3id.org/prop#>\n",

            "CONSTRUCT",
            "WHERE {",
            "\t?s a bot:Space ;",
            "\t\tprop:type \"Type A\" ;",
            "\t\t?key ?value .",
            "}"
        ]
    },
    {
        "title": "2: OPM requirement",
        "description": [
            "In this example [OPM](https://github.com/w3c-lbd-cg/opm) is used to model property states, thereby allowing to track the history of a property. Further, since the property is objectified, it can be classified as \n",
            "The states are classified as `opm:Requirements` meaning that they hold a required value of the property.\n",
            "The latest state is classified as an `opm:CurrentState`. The query only returns properties valid for spaces of type `inst:TypeA`.",
            "#### Triples",
            "The dataset includes three spaces. Two of them are of type `inst:TypeA` and the last one is of type `inst:TypeB`. They all have object property `prop:area` assigned as an `opm:Requirement`. Each property requirement has at least one state, and the most recent one is classified as an `opm:CurrentState`. The states holds value restrictions and provenance data.",
            "Assigning a property to all spaces of a certain type can be achieved with the following query:\n",
            "```sparql",
            "INSERT {",
            "\t?s prop:area inst:PropA .",
            "\tinst:PropA a opm:Requirement ;",
            "\t\topm:hasState inst:StateA .",
            "\tinst:StateA a opm:CurrentState ;",
            "\t\topm:minimumValue \"12 m2\" ;",
            "\t\tprov:generatedAtTime ?now .",
            "}",
            "WHERE { ?s a inst:TypeA . BIND(now() AS ?now) }```",
            "Updating a property can be achieved with:\n",
            "```sparql",
            "DELETE { ?stateURI a opm:CurrentState }",
            "INSERT {",
            "\t?propURI opm:hasState inst:StateB .",
            "\tinst:StateB a opm:CurrentState ;",
            "\t\topm:minimumValue \"14 m2\" ;",
            "\t\tprov:generatedAtTime ?now .",
            "}",
            "WHERE {",
            "\t?s a bot:Space , inst:TypeA ;",
            "\t\tprop:area ?propURI .",
            "\t?propURI opm:hasState ?stateURI .",
            "\tBIND(now() AS ?now)",
            "}```",
            "#### Query",
            "The specified query retrieves all spaces of type `inst:TypeA` and the latest state of their properties."
        ],
        "triples": [
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix inst: <https://example.org/projectXX/> .",
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .",
            "@prefix prop: <https://w3id.org/prop#> .",
            "@prefix opm:  <https://w3id.org/opm#> .",
            "@prefix prov: <http://www.w3.org/ns/prov#> .",
            "@prefix cdt:  <http://w3id.org/lindt/custom_datatypes#> .\n",

            "# THREE SPACE INSTANCES - TWO TYPES",
            "inst:SpaceA a bot:Space , inst:TypeA ;",
            "\tprop:area inst:PropA .",
            "inst:SpaceB a bot:Space , inst:TypeA ;",
            "\tprop:area inst:PropA .",
            "inst:SpaceC a bot:Space , inst:TypeB ;",
            "\tprop:area inst:PropB .\n",

            "# PROPERTY A",
            "inst:PropA a opm:Requirement ;",
            "\t# STATE 1",
            "\topm:hasState [ opm:minimumValue \"12 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-01-01T13:35:23Z\" ] ;",
            "\t# STATE 2 (CURRENT STATE)",
            "\topm:hasState[ a opm:CurrentState ;",
            "\t\topm:minimumValue \"14 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-01-03T13:35:23Z\" ] .\n",

            "# PROPERTY B",
            "inst:PropB a opm:Requirement ;",
            "\t# STATE 1",
            "\topm:hasState[ a opm:CurrentState ;",
            "\t\topm:minimumValue \"16 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-01-01T14:35:23Z\" ] ."
            ],
        "query": [
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX inst: <https://example.org/projectXX/>",
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>",
            "PREFIX prop: <https://w3id.org/prop#>",
            "PREFIX opm:  <https://w3id.org/opm#>",
            "PREFIX prov: <http://www.w3.org/ns/prov#>",
            "PREFIX cdt:  <http://w3id.org/lindt/custom_datatypes#>\n",
            
            "CONSTRUCT",
            "WHERE {",
            "\t?s a inst:TypeA .",
            "\t?s ?property ?propURI .",
            "\t?propURI a opm:Requirement ;",
            "\t\topm:hasState ?stateURI .",
            "\t?stateURI a opm:CurrentState ;",
            "\t\t?key ?val .",
            "}"
        ]
    },
    {
        "title": "3: OPM realised",
        "description": [
            "As the architect designs `inst:SpaceA`, an actual geometrically defined area exists. In the following it is illustrated how this can be attached to the graph. The query is to check if the requirement is fulfilled.",
            "```sparql",
            "SELECT DISTINCT ?space ?minReqViolated ?maxReqViolated ?exactMatchViolated",
            "WHERE {",
            "\t?s a bot:Space .",
            "\t# GET LATEST STATE OF ACTUAL AREA",
            "\t{ SELECT ?area ?areaState WHERE {",
            "\t\t?s prop:area ?area .",
            "\t\t?area opm:hasState ?areaState .",
            "\t\t?areaState a opm:CurrentState .",
            "\t\tMINUS { ?area a opm:Requirement }",
            "\t} }",
            "\t# GET GET LATEST STATE OF REQUIRED AREA",
            "\t{ SELECT ?areaReq ?reqState WHERE {",
            "\t\t?s prop:area ?areaReq .",
            "\t\t?areaReq opm:hasState ?reqState .",
            "\t\t?reqState a opm:CurrentState .",
            "\t\t?areaReq a opm:Requirement .",
            "\t} }",
            "\t# MATCH",
            "\t?space prop:area ?area , ?areaReq .",
            "\t# GET VALUES",
            "\tOPTIONAL{",
            "\t\t?areaState opm:value ?areaV",
            "\t\tBIND(strbefore(str(?areaV), ' ') AS ?areaVal)",
            "\t}",
            "\tOPTIONAL{",
            "\t\t?reqState opm:minimumValue ?minReq",
            "\t\tBIND(strbefore(str(?minReq), ' ') AS ?minReqVal)",
            "\t}",
            "\tOPTIONAL{",
            "\t\t?reqState opm:maximumValue ?maxReq",
            "\t\tBIND(strbefore(str(?maxReq), ' ') AS ?maxReqVal)",
            "\t}",
            "\tOPTIONAL{",
            "\t\t?reqState opm:value ?reqV",
            "\t\tBIND(strbefore(str(?reqV), ' ') AS ?reqVal)",
            "\t}",
            "\t# DO THE MATH",
            "\tBIND(?areaVal < ?minReqVal AS ?minReqViolated)",
            "\tBIND(?areaVal > ?maxReqVal AS ?maxReqViolated)",
            "\tBIND(?areaVal != ?reqVal AS ?exactMatchViolated)",
            "}",
            "```",
            "Returns something like:\n",
            "space       | minReqViolated | maxReqViolated | exactMatchViolated",
            "----------- | -------------- | -------------- | ---",
            "inst:SpaceA | false          | -              | - "
        ],
        "triples": [
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix inst: <https://example.org/projectXX/> .",
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .",
            "@prefix prop: <https://w3id.org/prop#> .",
            "@prefix opm:  <https://w3id.org/opm#> .",
            "@prefix prov: <http://www.w3.org/ns/prov#> .",
            "@prefix cdt:  <http://w3id.org/lindt/custom_datatypes#> .\n",
            
            "### BUILDING OWNER",
            "# THREE SPACE INSTANCES - TWO TYPES",
            "inst:SpaceA a bot:Space , inst:TypeA ;",
            "\tprop:area inst:PropA .",
            "inst:SpaceB a bot:Space , inst:TypeA ;",
            "\tprop:area inst:PropA .",
            "inst:SpaceC a bot:Space , inst:TypeB ;",
            "\tprop:area inst:PropB .\n",
            
            "# PROPERTY A",
            "inst:PropA a opm:Requirement ;",
            "\t# STATE 1",
            "\topm:hasState [ opm:minimumValue \"12 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-01-01T13:35:23Z\" ] ;",
            "\t# STATE 2 (CURRENT STATE)",
            "\topm:hasState[ a opm:CurrentState ;",
            "\t\topm:minimumValue \"14 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-01-03T13:35:23Z\" ] .\n",
            
            "# PROPERTY B",
            "inst:PropB a opm:Requirement ;",
            "\t# STATE 1",
            "\topm:hasState[ a opm:CurrentState ;",
            "\t\topm:minimumValue \"16 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-01-01T14:35:23Z\" ] .\n",
            
            "### ARCHITECT",
            "# SPACE INSTANCES",
            "inst:SpaceA prop:area inst:PropC .",
            "inst:SpaceB prop:area inst:PropD .\n",
            
            "# PROPERTY C",
            "inst:PropC a opm:Property ;",
            "\t# STATE 1",
            "\topm:hasState[ a opm:CurrentState ;",
            "\t\topm:value \"15 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-02-05T11:35:23Z\" ] .\n",
            
            "# PROPERTY D",
            "inst:PropD a opm:Property ;",
            "\t# STATE 1",
            "\topm:hasState[ a opm:CurrentState ;",
            "\t\topm:value \"13 m2\" ;",
            "\t\tprov:generatedAtTime \"2018-02-05T11:35:23Z\" ] ."
        ],
        "query": [
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX inst: <https://example.org/projectXX/>",
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>",
            "PREFIX prop: <https://w3id.org/prop#>",
            "PREFIX opm:  <https://w3id.org/opm#>",
            "PREFIX prov: <http://www.w3.org/ns/prov#>",
            "PREFIX cdt:  <http://w3id.org/lindt/custom_datatypes#>",
            
            "CONSTRUCT",
            "WHERE {",
            "\tinst:SpaceA ?property ?propURI .",
            "\t?propURI a ?propClass ;",
            "\t\topm:hasState ?stateURI .",
            "\t?stateURI a opm:CurrentState ;",
            "\t\t?key ?val .",
            "}"
        ]
    }
]